def label = "weapp-${UUID.randomUUID().toString()}"
podTemplate(
    name:'weapp-develop',
    namespace:'jenkins-namespace',
    serviceAccount:'jenkins',
    label:label,
    containers:[
        containerTemplate(name: 'tool', image:'registry.cn-hangzhou.aliyuncs.com/podtemplate/base-image:latest',alwaysPullImage: true,command:'cat',ttyEnabled: true)
    ],
    volumes:[
        hostPathVolume(mountPath: '/var/run/docker.sock', hostPath: '/var/run/docker.sock'),
        nfsVolume(mountPath: '/home/jenkins/.kube', readOnly: false, serverAddress: '192.168.0.102', serverPath: '/var/nfs/jenkins_slave/.kube')
    ]
){
    node(label){
        stage('get code') {
            git branch: 'master', url: 'https://github.com/aijiamuyingfang/weapp_server.git'
        }

        stage('replace content'){
            withCredentials([
                usernamePassword(credentialsId: '3fdbf8de-1d06-46f8-80fe-a97a65500f55', passwordVariable: 'MANAGER_PASSWORD', usernameVariable: 'MANAGER_USERNAME'), 
                usernamePassword(credentialsId: 'b968024d-e10a-40ec-9731-daaf514a27ee', passwordVariable: 'WEAPP_SECRET', usernameVariable: 'WEAPP_APPID'), 
                usernamePassword(credentialsId: '7fc61d02-aea8-43e8-a9af-edf9b4038f1b', passwordVariable: 'DATABASE_PASSWORD', usernameVariable: 'DATABASE_USERNAME'), 
                usernamePassword(credentialsId: '3a17cc2c-396f-46f2-ab6c-69f648686fc8', passwordVariable: 'GITHUB_PASSWORD', usernameVariable: 'GITHUB_USERNAME')]) {
                    
                contentReplace(
                    configs: [
                        fileContentReplaceConfig(
                            configs: [
                                fileContentReplaceItemConfig(
                                    matchCount: 0, replace: "$WEAPP_APPID", search: '<WEAPP_APPID>'
                                ), 
                                fileContentReplaceItemConfig(
                                    matchCount: 0, replace: "$WEAPP_SECRET", search: '<WEAPP_SECRET>'
                                ), 
                                fileContentReplaceItemConfig(
                                    matchCount: 0, replace: "$DATABASE_USERNAME", search: '<WEAPP_DATASOURCE_USERNAME>'
                                ), 
                                fileContentReplaceItemConfig(
                                    matchCount: 0, replace: "$DATABASE_PASSWORD", search: '<WEAPP_DATASOURCE_PASSWORD>'
                                ), 
                                fileContentReplaceItemConfig(
                                    matchCount: 0, replace: "$GITHUB_USERNAME", search: '<WEAPP_CONFIG_REPO_USERNAME>'
                                ),
                                fileContentReplaceItemConfig(
                                    matchCount: 0, replace: "$GITHUB_PASSWORD", search: '<WEAPP_CONFIG_REPO_PASSWORD>'
                                )
                            ], 
                            fileEncoding: 'UTF-8', 
                            filePath: 'build/weapp/Config.yaml,build/weapp_test/Config.yaml'
                        ),
                        fileContentReplaceConfig(
                            configs: [
                                fileContentReplaceItemConfig(
                                    matchCount: 0, replace: "$WEAPP_APPID", search: '<WEAPP_APPID>'
                                ), 
                                fileContentReplaceItemConfig(
                                    matchCount: 0, replace: "$WEAPP_SECRET", search: '<WEAPP_SECRET>'
                                )
                            ], 
                            fileEncoding: 'UTF-8', 
                            filePath: 'sources/cn.aijiamuyingfang.server/cn.aijiamuyingfang.server.app/cn.aijiamuyingfang.server.foundation/cn.aijiamuyingfang.server.auth/src/main/resources/data.sql'
                        ), 
                        fileContentReplaceConfig(
                            configs: [
                                fileContentReplaceItemConfig(
                                    matchCount: 0, replace: "$MANAGER_USERNAME", search: '<MANAGER_USERNAME>'
                                )
                            ], 
                            fileEncoding: 'UTF-8', 
                            filePath: 'sources/cn.aijiamuyingfang.server/cn.aijiamuyingfang.server.app/cn.aijiamuyingfang.server.foundation/cn.aijiamuyingfang.server.user/src/main/resources/data.sql'
                        ), 
                        fileContentReplaceConfig(
                            configs: [
                                fileContentReplaceItemConfig(
                                    matchCount: 0, replace: "$MANAGER_USERNAME", search: '<MANAGER_USERNAME>'
                                ),
                                fileContentReplaceItemConfig(
                                    matchCount: 0, replace: "$MANAGER_PASSWORD", search: '<MANAGER_PASSWORD>'
                                )
                            ], 
                            fileEncoding: 'UTF-8', 
                            filePath: 'sources/cn.aijiamuyingfang.server/cn.aijiamuyingfang.server.it/src/test/java/cn/aijiamuyingfang/server/it/AbstractTestAction.java'
                        )
                    ]
                )
            }
        }

        stage('clean') {
            container('tool') {
                try {
                    sh """
                        kubectl delete -f build/weapp/
                    """
                }catch(exc){
                    println exc
                }

                nodeIPAddr = sh (
                    script: """
                        kubectl get nodes -o jsonpath='{.items[*].status.addresses[?(@.type=="InternalIP")].address}'
                    """,
                    returnStdout: true
                ).trim().split()
                for(int i=0;i<nodeIPAddr.size();i++){
                    def ip=nodeIPAddr[i].trim()
                    try {
                        withCredentials([usernamePassword(credentialsId: ip, usernameVariable: 'NODE_USERNAME', passwordVariable: 'NODE_PASSWORD')]) {

                            def imageArr = sh (
                                script: """
                                    sshpass -p $NODE_PASSWORD ssh -o StrictHostKeyChecking=no $NODE_USERNAME@$ip \"docker images --filter=reference='registry.cn-hangzhou.aliyuncs.com/fuyoushengwu/*:*' --format={{.Repository}}:{{.Tag}}\"
                                """,
                                returnStdout: true
                            ).trim().split()
                            for(int j=0;j<imageArr.size();j++){
                                def image = imageArr[j].trim()
                                if("".equals(image)) {
                                    continue
                                }
                                if(image.endsWith("<none>")) {
                                    image = image.replace(":<none>","")
                                    image = sh(
                                        script: """
                                            sshpass -p $NODE_PASSWORD ssh -o StrictHostKeyChecking=no $NODE_USERNAME@$ip \"docker images --filter=reference='$image' --format={{.ID}}\"
                                        """,
                                        returnStdout: true
                                    ).trim()
                                }
                                try {
                                    sh """
                                        sshpass -p $NODE_PASSWORD ssh -o StrictHostKeyChecking=no $NODE_USERNAME@$ip \"docker rmi $image\"
                                    """
                                } catch (exc) {
                                    println exc
                                }
                            }
                        }
                    } catch(exc) {
                        println exc
                    }
                }
            }
        }

        stage('deploy') {
            container('tool') {
                withCredentials([usernamePassword(credentialsId: '15e12bc7-0022-42f7-8d48-fb96d3660bb2', usernameVariable: 'DATABASE_USERNAME', passwordVariable: 'DATABASE_PASSWORD')]) {
                    sh """
                        export WEAPP_DATASOURCE_USERNAME=$DATABASE_USERNAME
                        export WEAPP_DATASOURCE_PASSWORD=$DATABASE_PASSWORD
                        kubectl apply -f build/weapp/
                    """
                }
            }
        }

    }
}