def label = "weapp-${UUID.randomUUID().toString()}"
podTemplate(
    name:'weapp-develop',
    namespace:'jenkins-namespace',
    serviceAccount:'jenkins',
    label:label,
    containers:[
        containerTemplate(name: 'tool', image:'registry.cn-hangzhou.aliyuncs.com/podtemplate/base-image:latest',alwaysPullImage: true,command:'cat',ttyEnabled: true)
    ],
    volumes:[
        hostPathVolume(mountPath: '/var/run/docker.sock', hostPath: '/var/run/docker.sock'),
        nfsVolume(mountPath: '/home/jenkins/.kube', readOnly: false, serverAddress: '192.168.0.102', serverPath: '/var/nfs/jenkins_slave/.kube')
    ]
){
    node(label){
        stage('get code') {
            git branch: 'spring-cloud', url: 'https://github.com/aijiamuyingfang/weapp_server.git'
        }

        stage('clean') {
            container('tool') {
                try {
                    sh """
                        kubectl delete -f build/weapp/
                    """
                }catch(exc){
                    println exc
                }

                nodeIPAddr = sh (
                    script: """
                        kubectl get nodes -o jsonpath='{.items[*].status.addresses[?(@.type=="InternalIP")].address}'
                    """,
                    returnStdout: true
                ).trim().split()
                for(int i=0;i<nodeIPAddr.size();i++){
                    def ip=nodeIPAddr[i].trim()
                    try {
                        withCredentials([usernamePassword(credentialsId: ip, usernameVariable: 'NODE_USERNAME', passwordVariable: 'NODE_PASSWORD')]) {

                            def imageArr = sh (
                                script: """
                                    sshpass -p $NODE_PASSWORD ssh -o StrictHostKeyChecking=no $NODE_USERNAME@$ip \"docker images --filter=reference='registry.cn-hangzhou.aliyuncs.com/fuyoushengwu/*:*' --format={{.Repository}}:{{.Tag}}\"
                                """,
                                returnStdout: true
                            ).trim().split()
                            for(int j=0;j<imageArr.size();j++){
                                def image = imageArr[j].trim()
                                if("".equals(image)) {
                                    continue
                                }
                                if(image.endsWith("<none>")) {
                                    image = image.replace(":<none>","")
                                    image = sh(
                                        script: """
                                            sshpass -p $NODE_PASSWORD ssh -o StrictHostKeyChecking=no $NODE_USERNAME@$ip \"docker images --filter=reference='$image' --format={{.ID}}\"
                                        """,
                                        returnStdout: true
                                    ).trim()
                                }
                                try {
                                    sh """
                                        sshpass -p $NODE_PASSWORD ssh -o StrictHostKeyChecking=no $NODE_USERNAME@$ip \"docker rmi $image\"
                                    """
                                } catch (exc) {
                                    println exc
                                }
                            }
                        }
                    } catch(exc) {
                        println exc
                    }
                }
            }
        }

        stage('deploy') {
            container('tool') {
                withCredentials([usernamePassword(credentialsId: '15e12bc7-0022-42f7-8d48-fb96d3660bb2', usernameVariable: 'DATABASE_USERNAME', passwordVariable: 'DATABASE_PASSWORD')]) {
                    sh """
                        export WEAPP_DATASOURCE_USERNAME=$DATABASE_USERNAME
                        export WEAPP_DATASOURCE_PASSWORD=$DATABASE_PASSWORD
                        kubectl apply -f build/weapp/
                    """
                }
            }
        }

    }
}